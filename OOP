🚀 Object-Oriented Programming (OOP) in Python
We'll cover Classes, Objects, Inheritance, and Decorators with detailed explanations, best practices, and ideal use cases.

1️⃣ Classes & Objects
✅ Definition:
A class is a blueprint for creating objects, and an object is an instance of a class.

✅ Example:

python
Copy
Edit
# Defining a Class
class Car:
    def __init__(self, brand, model, year):
        self.brand = brand  # Attribute
        self.model = model
        self.year = year

    def start(self):
        return f"{self.brand} {self.model} is starting!"

# Creating Objects
car1 = Car("Toyota", "Corolla", 2022)
car2 = Car("Tesla", "Model S", 2023)

# Using Methods
print(car1.start())  # Toyota Corolla is starting!
print(car2.start())  # Tesla Model S is starting!
🎯 Best Practices:

Use camel case for class names (Car, not car).
Define an __init__ constructor for initializing object attributes.
Encapsulate behavior using methods.
🛠 Ideal Use Cases:

Representing real-world entities (e.g., Car, User, BankAccount).
Structuring applications for better scalability.
2️⃣ Inheritance (Reusing Code)
✅ Definition:
Inheritance allows a class (child) to inherit methods and attributes from another class (parent).

✅ Example:

python
Copy
Edit
# Parent Class
class Animal:
    def __init__(self, name):
        self.name = name

    def make_sound(self):
        return "Some sound"

# Child Class (inherits from Animal)
class Dog(Animal):
    def make_sound(self):
        return "Bark!"  # Overriding method

# Creating an Object
dog = Dog("Buddy")
print(dog.name)          # Buddy
print(dog.make_sound())  # Bark!
🎯 Best Practices:

Use descriptive names (Animal, Dog, not A, D).
Override only when necessary for customization.
Use super() to call parent methods when needed.
🛠 Ideal Use Cases:

Creating a hierarchy (e.g., Animal → Dog → Bulldog).
Avoiding duplicate code by sharing common logic.
3️⃣ Decorators (Enhancing Functions & Methods)
✅ Definition:
A decorator is a function that modifies another function without changing its actual code.

✅ Example:

python
Copy
Edit
# Simple Decorator
def logger(func):
    def wrapper():
        print(f"Calling {func.__name__}()")
        return func()
    return wrapper

@logger  # Applying decorator
def greet():
    print("Hello, world!")

greet()
# Output:
# Calling greet()
# Hello, world!
✅ Class Method Decorators

python
Copy
Edit
class User:
    def __init__(self, name):
        self.name = name

    @staticmethod
    def general_info():
        return "This is a User class."

    @classmethod
    def create_guest(cls):
        return cls("Guest")

# Using Decorators
print(User.general_info())    # Calls static method
guest = User.create_guest()   # Calls class method
print(guest.name)             # Guest
🎯 Best Practices:

Use @staticmethod for utility functions inside classes.
Use @classmethod when creating instances in an alternative way.
Use decorators for logging, authentication, and timing functions.
🛠 Ideal Use Cases:

Logging: @logger to track function calls.
Security: @authenticate to verify user access.
Performance: @timeit to measure execution time.
💡 Summary
Feature	Best Use Cases
Classes & Objects	Organizing code into reusable components
Inheritance	Sharing common behavior across multiple classes
Decorators	Adding extra functionality (e.g., logging, validation)
